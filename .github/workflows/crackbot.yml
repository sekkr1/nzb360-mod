name: crackbot
on:
  push:
  schedule:
    - cron: '0 0 * * *'
jobs:
  fetch:
    runs-on: ubuntu-latest
    outputs: 
      proceed:  ${{ !steps.cache.outputs.cache-hit }}
      apk_name: $NEW_APKNAME
    env:
      APKNAME: nzb360
      PACKAGE: com.kevinforeman.nzb360
    steps:
      - uses: actions/setup-python@v2
      - run: sudo apt-get install -y aapt
      - run: git clone https://github.com/sekkr1/APK-Downloader.git
      - run: pip install -r APK-Downloader/requirements.txt
      - run: python APK-Downloader/APK-Downloader.py $PACKAGE
      - run: echo APK_VERSION=$(aapt dump badging $PACKAGE.apk | grep "versionName" | sed -e "s/.*versionName='//" -e "s/' .*//") >> $GITHUB_ENV
      - run: echo NEW_APKNAME=$APKNAME_$APK_VERSION >> $GITHUB_ENV
      - run: mv $PACKAGE.apk $NEW_APKNAME.apk
      - uses: actions/cache@v2
        id: cache
        with:
          path: $NEW_APKNAME.apk
          key: ${{ hashFiles('*.apk') }}
      - uses: actions/upload-artifact@v2
        with:
          name: $NEW_APKNAME.apk
          path: $NEW_APKNAME.apk
        if: '!steps.cache.outputs.cache-hit'
      - name: abort if cached
        run: curl https://api.telegram.org/bot$TG_BOT_TOKEN/sendMessage -F chat_id=$TG_CHAT_ID -F text="Ive already published $APK_VERSION."$'\nNo new versions for now bro :|'
        env:
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
        if: steps.cache.outputs.cache-hit	
  patch:
    needs: fetch
    runs-on: ubuntu-latest
    if: needs.fetch.outputs.proceed
    outputs:
      apk_name: $NEW_APKNAME
    env:
      APKNAME: ${{needs.fetch.outputs.apk_name}}
      NEW_APKNAME: $APKNAME_mod
    steps:
      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '8'
      - run: curl -LO https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool && chmod +x apktool
        working-directory: /usr/local/bin
      - run: curl -L -o apktool.jar https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.5.0.jar && chmod +x apktool.jar
        working-directory: /usr/local/bin
      - uses: actions/download-artifact@v2
        with:
          name: $APKNAME.apk
          path: .
      - run: apktool d $APKNAME.apk
      - run: TO_PATCH=$(grep -rl 'const-string p1, "valid"' $APKNAME) && sed -i 's/const-string p1, "valid"/move-object p1, p3/' $TO_PATCH
      - run: apktool b --use-aapt2 -o ../$NEW_APKNAME.apk
        working-directory: $APKNAME
      - uses: actions/upload-artifact@v2
        with:
          name: $NEW_APKNAME.apk
          path: $NEW_APKNAME.apk
  sign:
    needs: patch
    runs-on: ubuntu-latest
    outputs:
      apk_name: $NEW_APKNAME
    env:
      APKNAME: ${{needs.patch.outputs.apk_name}}
      NEW_APKNAME: $APKNAME_signed
    steps:
      - uses: actions/setup-java@v2
        with:
            distribution: 'adopt'
            java-version: '8'
      - run: curl -L -o uber-apk-signer.jar https://github.com/patrickfav/uber-apk-signer/releases/download/v1.2.1/uber-apk-signer-1.2.1.jar && chmod +x uber-apk-signer.jar
      - uses: actions/download-artifact@v2
        with:
          name: $APKNAME.apk
          path: .
      - run: java -jar uber-apk-signer.jar -a $APKNAME.apk
      - run: mv nzb360_mod-aligned-debugSigned.apk $NEW_APKNAME.apk
      - uses: actions/upload-artifact@v2
        with:
          name: $NEW_APKNAME.apk
          path: $NEW_APKNAME.apk
  publish:
    needs: sign
    runs-on: ubuntu-latest
    env:
      APKNAME: ${{needs.sign.outputs.apk_name}}
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: $APKNAME.apk
          path: .
      - run: curl https://api.telegram.org/bot$TG_BOT_TOKEN/sendDocument -F chat_id=$TG_CHAT_ID -F document=@$APKNAME.apk
        env:
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
          TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}